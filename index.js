const { Telegraf, Markup } = require("telegraf");
require("dotenv").config();
const fetch = require("node-fetch");
const helperText = require("./constants");
const bot = new Telegraf(process.env.BOT_TOKEN);
let fetchedLunches;
const MONDAY = 1;
const days = [
  "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ",
  "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
  "–≤—Ç–æ—Ä–Ω–∏–∫",
  "—Å—Ä–µ–¥–∞",
  "—á–µ—Ç–≤–µ—Ä–≥",
  "–ø—è—Ç–Ω–∏—Ü–∞",
  "—Å—É–±–±–æ—Ç–∞",
];
const arrayOfCafesForInit = [];
const buttonsArray = [];
const buttonsForTomorrowArray = [];

fetch("https://lunch-app-bot.herokuapp.com/")
  .then((res) => res.json())
  .then((data) => {
    fetchedLunches = data;
  })
  .then(() => {
    //specific cafes initialization
    for (cafe in fetchedLunches) {
      arrayOfCafesForInit.push(cafe);
    }
    arrayOfCafesForInit.forEach((el) => {
      createCafeReply(el);
      createCafeReply(`${el}_tomorrow`, "tomorrow");
    });
  })
  .then(() => {
    let tempArr = [];
    for (cafe in fetchedLunches) {
      buttonsForTomorrowArray.push(
        Markup.button.callback(`${cafe} –Ω–∞ –∑–∞–≤—Ç—Ä–∞`, `btn_${cafe}_tomorrow`)
      );

      if (tempArr.length < 2) {
        tempArr.push(Markup.button.callback(cafe, `btn_${cafe}`));
      }
      if (tempArr.length === 2) {
        buttonsArray.push([...tempArr]);
        tempArr.length = 0;
      }
    }
    if (tempArr.length) {
      buttonsArray.push([...tempArr]);
      tempArr.length = 0;
    }
  })
  .catch((er) => {
    console.error(er);
  });

//commands

bot.start((ctx) => {
  ctx.replyWithHTML(
    "<b>–æ–±–µ–¥—ã –≤ –¢–∞–º–±–æ–≤–µ</b>",
    Markup.keyboard(
      [
        [
          Markup.button.callback("–ü–æ –≤—Å–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è–º", "btn_weekday"),
          Markup.button.callback("–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∫–∞—Ñ–µ", "btn_cafes"),
        ],
        [
          Markup.button.callback("–ù–∞ –∑–∞–≤—Ç—Ä–∞", "btn_tomorrow"),
          Markup.button.callback("–°–ª—É—á–∞–π–Ω—ã–π –ª–∞–Ω—á!", "btn_random"),
        ],
      ],
      { resize_keyboard: true }
    )
  );
});
bot.help((ctx) => ctx.reply(helperText.commands));

bot.command("lunch", async (ctx) => {
  try {
    await ctx.replyWithHTML(
      "<b>–æ–±–µ–¥—ã –≤ –¢–∞–º–±–æ–≤–µ</b>",
      Markup.keyboard([
        [
          Markup.button.callback("–ü–æ –≤—Å–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è–º", "btn_weekday"),
          Markup.button.callback("–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∫–∞—Ñ–µ", "btn_cafes"),
        ],
        [
          Markup.button.callback("–ù–∞ –∑–∞–≤—Ç—Ä–∞", "btn_tomorrow"),
          Markup.button.callback("–°–ª—É—á–∞–π–Ω—ã–π –ª–∞–Ω—á!", "btn_random"),
        ],
      ])
    );
  } catch (e) {
    console.error(e);
  }
});
bot.command("feedback", async (ctx) => {
  try {
    await ctx.replyWithHTML(
      "<b>–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–∏—à–∏—Ç–µ –±–æ—Ç—É:</b>",
      Markup.inlineKeyboard([
        [Markup.button.callback("–±–æ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏", "btn_feedback")],
      ])
    );
  } catch (e) {
    console.error(e);
  }
});
bot.action("btn_feedback", async (ctx) => {
  try {
    ctx.replyWithHTML("<b>–∫–æ–Ω—Ç–∞–∫—Ç: <a href='https://google.com/'>link</a></b>");
  } catch (error) {
    console.error(error);
  }
});
//actions
bot.hears("–ù–∞ –∑–∞–≤—Ç—Ä–∞", async (ctx) => {
  try {
    // await ctx.answerCbQuery();
    await ctx.replyWithHTML(
      "<b>–ö–∞—Ñ–µ</b>",
      Markup.inlineKeyboard([buttonsForTomorrowArray])
    );
  } catch (e) {
    console.error(e);
  }
});

bot.hears("–°–ª—É—á–∞–π–Ω—ã–π –ª–∞–Ω—á!", async (ctx) =>
  ctx.replyWithDice({ emoji: "üé≤" }).then((res) => {
    let weekend = false;
    let todaysIndex = new Date().getDay();
    let today = days[todaysIndex];
    if (today === "—Å—É–±–±–æ—Ç–∞" || today === "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ") {
      today = "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫";
      todaysIndex = 1;
      weekend = true;
    }
    const randomCafe =
      arrayOfCafesForInit[res.dice.value % arrayOfCafesForInit.length];
    const randomLunch = fetchedLunches[randomCafe][todaysIndex - 1];

    let text = `
${randomLunch["meal"]}
–±–æ–Ω—É—Å: ${randomLunch["bonus"]}
—Ü–µ–Ω–∞: ${randomLunch["price"]}
`;
    if (weekend)
      ctx.replyWithHTML(
        "–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π. –ù–æ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∫–æ—Å—Ç–∏ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç –∏–¥—Ç–∏ –≤ ..."
      );
    setTimeout(() => {
      ctx.replyWithHTML(`${randomCafe}`);
      bot.hears(
        "photo",
        ctx.replyWithPhoto(
          { url: randomLunch.url },
          {
            caption: `${text}`,
          }
        )
      );
    }, 2200);
  })
);

bot.hears("–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∫–∞—Ñ–µ", async (ctx) => {
  try {
    await ctx.replyWithHTML("<b>–ö–∞—Ñ–µ</b>", Markup.inlineKeyboard(buttonsArray));
  } catch (e) {
    console.error(e);
  }
});

// service functions
function createWeekDayReply(weekdayFromUser) {
  const actionMarker = weekdayFromUser ?? "";
  bot.hears(`–ü–æ –≤—Å–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è–º${actionMarker}`, async (ctx) => {
    let weekendFlag = false;

    let today = new Date().getDay();

    if (today === 0 || today === 6) {
      weekendFlag = true;
      today = 0;
    }
    const cafesAndLunchesForToday = {};

    let dateMarker;

    if (weekdayFromUser === " –Ω–∞ –∑–∞–≤—Ç—Ä–∞") dateMarker = "–∑–∞–≤—Ç—Ä–∞";
    else if (weekendFlag) dateMarker = "–≤ –≤—ã—Ö–æ–¥–Ω—ã–µ";
    else dateMarker = "—Å–µ–≥–æ–¥–Ω—è";
    const headerForWeekend = `–ü–æ—Ö–æ–∂–µ, ${dateMarker} –Ω–µ—Ç –ª–∞–Ω—á–µ–π. –ë–ª–∏–∂–∞–π—à–∏–µ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –≤–æ—Ç —Å–ø–∏—Å–æ–∫:`;
    for (cafe in fetchedLunches) {
      cafesAndLunchesForToday[cafe] = fetchedLunches[cafe][today - 1];
    }
    if (weekendFlag) {
      await ctx.replyWithHTML(headerForWeekend);
    }
    for (cafe in cafesAndLunchesForToday) {
      let text = `
${cafe}, ${cafesAndLunchesForToday[cafe]["day"]}
${cafesAndLunchesForToday[cafe]["meal"]}
–±–æ–Ω—É—Å: ${cafesAndLunchesForToday[cafe]["bonus"]}
—Ü–µ–Ω–∞: ${cafesAndLunchesForToday[cafe]["price"]}
  `;
      bot.hears(
        "photo",
        ctx.replyWithPhoto(
          { url: cafesAndLunchesForToday[cafe]["url"] },
          {
            caption: `${text}`,
          }
        )
      );
    }
  });
}

function infoForTodayFn(info) {
  const html = `
–¥–µ–Ω—å: ${info.day}
${info.meal}
–±–æ–Ω—É—Å—ã: ${info.bonus}
—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${info.price}
  `;
  return html;
}

function createCafeReply(cafe, dayFromUser) {
  return bot.action(`btn_${cafe}`, async (ctx) => {
    //–º–∞—Ä–∫–µ—Ä tomorrow –º–µ—à–∞–µ—Ç –ø–æ–∏—Å–∫—É –ø–æ –±–∞–∑–µ. —É–±–∏—Ä–∞–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å.
    const cafeToFind = cafe.includes("_") ? cafe.split("_")[0] : cafe;
    let today;

    if (!dayFromUser) today = days[new Date().getDay()];
    else if (dayFromUser === "tomorrow")
      today = days[new Date().getDay() < 7 ? new Date().getDay() + 1 : 0];
    else today = dayFromUser;

    let dateMarker;
    if (dayFromUser === "tomorrow") dateMarker = "–∑–∞–≤—Ç—Ä–∞";
    else if (dayFromUser) dateMarker = "–≤ –≤—ã—Ö–æ–¥–Ω—ã–µ";
    else dateMarker = "—Å–µ–≥–æ–¥–Ω—è";
    if (today === "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ" || today === "—Å—É–±–±–æ—Ç–∞") {
      today = days[MONDAY];
      let infoForMonday = fetchedLunches[cafeToFind].find(
        (el) => el.day === today
      );

      await ctx.answerCbQuery();

      return bot.hears(
        "photo",
        ctx.replyWithPhoto(
          { url: infoForMonday["url"] },
          {
            caption: `
–ü–æ—Ö–æ–∂–µ, —á—Ç–æ ${dateMarker} –Ω–µ—Ç –ª–∞–Ω—á–µ–π. –ë–ª–∏–∂–∞–π—à–∏–π –ª–∞–Ω—á –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: 
${infoForTodayFn(infoForMonday)}`,
          }
        )
      );
    }

    const infoForToday = fetchedLunches[cafeToFind].find(
      (el) => el.day === today
    );

    try {
      await ctx.answerCbQuery();
      bot.hears(
        "photo",
        ctx.replyWithPhoto(
          { url: infoForToday["url"] },
          {
            caption: `
${infoForTodayFn(infoForToday)}`,
          }
        )
      );
    } catch (e) {
      console.error(e);
    }
  });
}

//initialization
createWeekDayReply();
bot.launch();

// Enable graceful stop
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
